/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _levels = __webpack_require__(1);
	
	var _levels2 = _interopRequireDefault(_levels);
	
	var _controls = __webpack_require__(13);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _credits = __webpack_require__(14);
	
	var _credits2 = _interopRequireDefault(_credits);
	
	var _scores = __webpack_require__(15);
	
	var _scores2 = _interopRequireDefault(_scores);
	
	var _menu = __webpack_require__(22);
	
	var _menu2 = _interopRequireDefault(_menu);
	
	var _preload = __webpack_require__(24);
	
	var _preload2 = _interopRequireDefault(_preload);
	
	var _boot = __webpack_require__(25);
	
	var _boot2 = _interopRequireDefault(_boot);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var Application = {
	  canvasParentElement: "",
	  canvasSize: [1920, 1080],
	  canvasType: Phaser.AUTO,
	  debug: true,
	  phaser: null,
	
	  start: function start(array) {
	    this.phaser = new Phaser.Game(this.canvasSize[0], this.canvasSize[1], this.canvasType, this.canvasParentElement, this.canvasCallbacks);
	
	    for (var i = 0; i < array.length; ++i) {
	      this.phaser.state.add(array[i].key, array[i].template);
	    }
	
	    this.phaser.state.start(array[0].key);
	  },
	
	  main: function () {
	    window.addEventListener("DOMContentLoaded", function () {
	      Application.start([(0, _boot2.default)(Application), (0, _preload2.default)(Application), (0, _menu2.default)(Application), (0, _credits2.default)(Application), (0, _scores2.default)(Application), (0, _controls2.default)(Application)].concat(_toConsumableArray((0, _levels2.default)(Application))));
	    });
	  }()
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getLayout = exports.levelsStored = exports.storeLevel = exports.LevelLayout = undefined;
	
	var _level = __webpack_require__(26);
	
	var _level2 = _interopRequireDefault(_level);
	
	var _level3 = __webpack_require__(27);
	
	var _level4 = _interopRequireDefault(_level3);
	
	var _level5 = __webpack_require__(28);
	
	var _level6 = _interopRequireDefault(_level5);
	
	var _level7 = __webpack_require__(29);
	
	var _level8 = _interopRequireDefault(_level7);
	
	var _level9 = __webpack_require__(2);
	
	var _level10 = _interopRequireDefault(_level9);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var levelLayouts = [];
	
	var LevelLayout = exports.LevelLayout = { LV1: 1, LV2: 2, LV3: 3, LV4: 4, LV5: 5 };
	
	var storeLevel = exports.storeLevel = function storeLevel(lvl) {
	  if (lvl) {
	    levelLayouts.push(lvl);
	  }
	};
	
	var levelsStored = exports.levelsStored = function levelsStored() {
	  return levelLayouts.length;
	};
	
	var getLayout = exports.getLayout = function getLayout(ID) {
	  if (ID >= levelLayouts.length) {
	    return null;
	  } else {
	    return levelLayouts[ID - 1];
	  }
	};
	
	exports.default = function (app) {
	  return [(0, _level10.default)(app), (0, _level8.default)(app), (0, _level6.default)(app), (0, _level4.default)(app), (0, _level2.default)(app)];
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Level1 = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	var _bullet = __webpack_require__(5);
	
	var _player = __webpack_require__(6);
	
	var _level = __webpack_require__(7);
	
	var _music = __webpack_require__(4);
	
	var _levels = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Level1.application = app;
	  return {
	    key: 'LV1',
	    template: Level1
	  };
	};
	
	var Level1 = exports.Level1 = function () {
	  function Level1() {
	    _classCallCheck(this, Level1);
	  }
	
	  _createClass(Level1, [{
	    key: 'preload',
	    value: function preload() {
	      this.game = Level1.application.phaser;
	
	      this.pointer = this.game.input.activePointer;
	      this.pointer.y = 650;
	      this.pointer.x = 0;
	
	      this.levelLayout = new _level.Level(this.game, _levels.LevelLayout.LV1, "data/lvl/level1.json");
	      this.uiButtons = new _buttons.ButtonSet(this.game);
	      this.player = new _player.Player(this.game);
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      var _this = this;
	
	      this.levelLayout.createWorld();
	      this.player.setup();
	
	      this.uiButtons.pushButton("MENU", 30, 30, 'button', this.handleBackButtonPress, this);
	      this.uiButtons.pushButton("SWITCH", 1880 - 200, 30, 'button', this.handleToggleButtonPress, this, "0x00FF00");
	      this.uiButtons.setButtonSetSize(200, 75);
	
	      this.uiButtons.attachText("MENU", "Menu", "30px Comic Sans MS");
	      this.uiButtons.attachText("SWITCH", "Change Bullet", "23px Comic Sans MS");
	      this.uiButtons.onUp = function (buttons) {
	        buttons[1].button.tint = _this.player.getBulletColour();
	      };
	
	      _music.Music.play(Level1.application.phaser, "level", true);
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      this.levelLayout.update(this.player, this.blockGroup);
	      this.player.update(this.game.input.activePointer, this.levelLayout, this.uiButtons.isOver);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Level1.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }, {
	    key: 'handleToggleButtonPress',
	    value: function handleToggleButtonPress() {
	      this.player.switchProjectile();
	    }
	  }, {
	    key: 'handleBackButtonPress',
	    value: function handleBackButtonPress() {
	      _music.Music.play(Level1.application.phaser, "menu", true);
	
	      this.levelLayout.stopSpawningEnemies();
	      this.game.state.start("Menu");
	    }
	  }]);
	
	  return Level1;
	}();
	
	;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ButtonSet = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _music = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ButtonSet = exports.ButtonSet = function () {
	  function ButtonSet(phaser) {
	    _classCallCheck(this, ButtonSet);
	
	    this.phaser = phaser;
	    this.buttons = [];
	    this.isOver = false;
	    this.tint = "0xFFFFFF";
	    this.onUp = function (button) {};
	  }
	
	  _createClass(ButtonSet, [{
	    key: "pushButton",
	    value: function pushButton(ID, x, y, texureID, callback, instance, tint) {
	      var newButton = this.phaser.add.button(x, y, texureID, callback, instance);
	      var current = this;
	
	      var onOut = function onOut() {
	        newButton.tint = current.tint;
	        current.isOver = false;
	        current.onUp(current.buttons);
	      };
	
	      var onDown = function onDown() {
	        newButton.tint = "0x333333";
	        current.isOver = true;
	        _music.Music.play(this.phaser, "click");
	      };
	
	      var onUp = function onUp() {
	        current.isOver = false;
	
	        setTimeout(function () {
	          newButton.tint = current.tint;
	          current.onUp(current.buttons);
	        }, 100);
	      };
	
	      newButton.onInputOver.add(function () {
	        current.isOver = true;newButton.tint = "0x333333";
	      }, this);
	      newButton.onInputDown.add(onDown, this);
	      newButton.onInputOut.add(onOut, this);
	      newButton.onInputUp.add(onUp, this);
	
	      if (tint) {
	        newButton.tint = tint;
	      }
	
	      this.buttons.push({
	        id: ID.toString(),
	        button: newButton,
	        text: null
	      });
	    }
	  }, {
	    key: "setButtonSetSize",
	    value: function setButtonSetSize(width, height) {
	      for (var i = 0; i < this.buttons.length; i++) {
	        this.buttons[i].button.height = height;
	        this.buttons[i].button.width = width;
	      }
	    }
	  }, {
	    key: "attachText",
	    value: function attachText(buttonID, text, textFont) {
	      for (var i = 0; i < this.buttons.length; i++) {
	        if (this.buttons[i].id.toLowerCase() === buttonID.toLowerCase()) {
	          var buttonImage = this.buttons[i].button;
	
	          this.buttons[i].text = this.phaser.add.text(0, 0, text, { font: textFont, fill: "#FDFDFD", align: "left" });
	
	          var buttonMiddleY = buttonImage.y + buttonImage.height / 2;
	          var buttonMiddleX = buttonImage.x + buttonImage.width / 2;
	
	          this.buttons[i].text.y = buttonMiddleY - this.buttons[i].text.height / 2;
	          this.buttons[i].text.x = buttonMiddleX - this.buttons[i].text.width / 2;
	
	          return true;
	        }
	      }
	
	      return false;
	    }
	  }]);

	  return ButtonSet;
	}();

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var Music = exports.Music = {
	  sounds: [],
	  muted: true,
	
	  pause: function pause(ID) {
	    for (var i = 0; i < this.sounds.length; i++) {
	      if (this.sounds[i].ID == ID) {
	        this.sounds[i].obj.pause();
	      }
	    }
	  },
	
	  stop: function stop(ID) {
	    for (var i = 0; i < this.sounds.length; i++) {
	      if (this.sounds[i].ID == ID) {
	        this.sounds[i].obj.stop();
	      }
	    }
	  },
	
	  play: function play(phaser, ID, loop) {
	    if (!this.muted) {
	      var music;
	
	      if (!loop) {
	        music = phaser.add.audio(ID);
	        music.play();
	      } else {
	        music = phaser.add.audio(ID);
	        music.loopFull(1.0);
	      }
	
	      this.sounds.push({ "ID": ID, "obj": music });
	    }
	  },
	
	  hasDecodedTracks: function hasDecodedTracks() {
	    var decodedTracks = 0;
	
	    for (var i = 0; i < this.sounds.length; i++) {
	      if (!this.sounds[i].isDecoding) {
	        decodedTracks++;
	      }
	    }
	
	    return decodedTracks == this.sounds.length;
	  },
	
	  clear: function clear() {
	    this.mute();
	    this.sounds.length = 0;
	  },
	
	  mute: function mute(ID) {
	    this.muted = !this.muted;
	
	    if (ID) {
	      for (var i = 0; i < this.sounds.length; i++) {
	        if (this.sounds[i].ID == ID) {
	          this.sounds[i].obj.mute = !this.sounds[i].obj.mute;
	          break;
	        }
	      }
	    } else {
	      for (var i = 0; i < this.sounds.length; i++) {
	        this.sounds[i].obj.mute = !this.sounds[i].obj.mute;
	      }
	    }
	  }
	};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Bullet = exports.BulletType = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _music = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var BulletType = exports.BulletType = {
	  Green: 0,
	  Red: 1,
	  Black: 2
	};
	
	var Bullet = exports.Bullet = function () {
	  function Bullet(game) {
	    _classCallCheck(this, Bullet);
	
	    this.activeBullet = BulletType.Green;
	    this.game = game;
	    this.sprites = [];
	  }
	
	  _createClass(Bullet, [{
	    key: "setup",
	    value: function setup() {
	      this.sprites = [this.game.add.sprite(-100, -100, "bullet"), this.game.add.sprite(-100, -100, "bullet1"), this.game.add.sprite(-100, -100, "bullet2")];
	
	      for (var i = 0; i < 3; i++) {
	        this.game.physics.enable(this.sprites[i], Phaser.Physics.ARCADE);
	
	        this.sprites[i].body.velocity.x = 0;
	        this.sprites[i].body.velocity.y = 0;
	        this.sprites[i].body.bounce.setTo(0.7, 0.7);
	        this.sprites[i].height = 25;
	        this.sprites[i].width = 25;
	      }
	    }
	  }, {
	    key: "handleEnemyCollision",
	    value: function handleEnemyCollision(obj1, obj2, type) {
	      this.reset(this.activeBullet);
	      return this.activeBullet == type;
	    }
	  }, {
	    key: "getActiveSprite",
	    value: function getActiveSprite() {
	      return this.sprites[this.activeBullet];
	    }
	  }, {
	    key: "reset",
	    value: function reset(index) {
	      this.sprites[index].body.collideWorldBounds = false;
	      this.sprites[index].body.velocity.x = 0;
	      this.sprites[index].body.velocity.y = 0;
	      this.sprites[index].body.gravity.y = 0;
	      this.sprites[index].x = -100;
	      this.sprites[index].y = -100;
	    }
	  }, {
	    key: "fire",
	    value: function fire(x, y, duration, direction, pointer_x, pointer_y) {
	      if (duration > 2000) duration = 2000;
	
	      var mag = duration * (2.0 / 2000.0);
	
	      var x_mag = (pointer_x - x) * mag;
	      var y_mag = (pointer_y - y) * mag;
	
	      this.sprites[this.activeBullet].body.velocity.y = 5 * y_mag;
	      this.sprites[this.activeBullet].body.velocity.x = 5 * x_mag;
	      this.sprites[this.activeBullet].body.collideWorldBounds = true;
	      this.sprites[this.activeBullet].body.gravity.y = 300;
	      this.sprites[this.activeBullet].x = x - 25 / 2;
	      this.sprites[this.activeBullet].y = y - 50;
	
	      _music.Music.play(this.game, "fire");
	    }
	  }, {
	    key: "update",
	    value: function update(player_x, player_y, blocks, playerAlive) {
	      if (playerAlive == false) {
	        this.reset(this.activeBullet);
	      }
	    }
	  }, {
	    key: "switchType",
	    value: function switchType() {
	      this.reset(this.activeBullet);
	      this.activeBullet++;
	
	      if (this.activeBullet > 2) {
	        this.activeBullet = 0;
	      }
	    }
	  }]);

	  return Bullet;
	}();

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Player = exports.PLAYER_SCORE = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _bullet = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PLAYER_SCORE = exports.PLAYER_SCORE = function (start) {
	  var score = start;
	  return function (number) {
	    score += number;
	    return score;
	  };
	}(0);
	
	var Player = exports.Player = function () {
	  function Player(game) {
	    _classCallCheck(this, Player);
	
	    this.projectile = new _bullet.Bullet(game);
	    this.game = game;
	    this.timeout = true;
	    this.duration = undefined;
	    this.disableUpdate = false;
	    this.deaths = 0;
	  }
	
	  _createClass(Player, [{
	    key: 'setup',
	    value: function setup() {
	      this.projectile.setup();
	
	      this.sprite = this.game.add.sprite(0, 650, 'character');
	      this.sprite.animations.add('walk', [0, 1, 2, 3, 4, 5]);
	      this.sprite.anchor.setTo(0.5, 1);
	
	      this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
	
	      this.sprite.body.gravity.y = 400;
	      this.sprite.body.collideWorldBounds = true;
	    }
	  }, {
	    key: 'exitScene',
	    value: function exitScene() {
	      this.sprite.body.collideWorldBounds = false;
	      this.sprite.body.velocity.x = 100;
	      this.disableUpdate = true;
	    }
	  }, {
	    key: 'setPosition',
	    value: function setPosition(x, y) {
	      this.sprite.x = x;
	      this.sprite.y = y;
	    }
	  }, {
	    key: 'switchProjectile',
	    value: function switchProjectile() {
	      this.projectile.switchType();
	    }
	  }, {
	    key: 'update',
	    value: function update(pointer, level, overHud) {
	      if (!this.disableUpdate) {
	        if (pointer.msSinceLastClick <= 250 && this.sprite.body.velocity.y == 0.0) {
	          this.sprite.body.velocity.y = -500;
	          pointer.msSinceLastClick = 500;
	        } else {
	          pointer.msSinceLastClick = 500;
	        }
	
	        if (pointer.isDown && !overHud) {
	          this.duration = pointer.duration;
	        }
	
	        if (pointer.isUp) {
	          if (this.duration != undefined && this.duration > 250 && this.sprite.visible) {
	            this.projectile.fire(this.sprite.x, this.sprite.y, this.duration, this.sprite.scale.x, parseInt(pointer.worldX), parseInt(pointer.worldY));
	          } else if (this.duration < 250 && this.duration != undefined) {
	            this.worldX = parseInt(pointer.worldX);
	            this.worldY = parseInt(pointer.worldY);
	          }
	
	          this.duration = undefined;
	        }
	
	        if (this.worldX > parseInt(this.sprite.x + this.sprite.width / 2)) {
	          this.sprite.animations.play('walk', 10, true);
	          this.sprite.body.velocity.x = 150;
	          this.actionTaken = true;
	
	          if (this.sprite.scale.x == -1) {
	            this.sprite.scale.x = 1;
	          }
	        } else if (this.worldX < parseInt(this.sprite.x - this.sprite.width / 2)) {
	          this.sprite.animations.play('walk', 10, true);
	          this.sprite.body.velocity.x = -150;
	
	          if (this.sprite.scale.x == 1) {
	            this.sprite.scale.x = -1;
	          }
	        } else {
	          this.sprite.animations.stop('walk', 0);
	          this.sprite.body.velocity.x = 0;
	        }
	      }
	
	      this.projectile.update(this.sprite.x, this.sprite.y, this.sprite.visible);
	    }
	  }, {
	    key: 'getBulletColour',
	    value: function getBulletColour() {
	      switch (this.projectile.activeBullet) {
	        case _bullet.BulletType.Green:
	          return "0x00FF00";
	        case _bullet.BulletType.Black:
	          return "0x000000";
	        case _bullet.BulletType.Red:
	          return "0xFF0000";
	
	        default:
	          break;
	      }
	
	      return "0xFFFFFF";
	    }
	  }, {
	    key: 'isAlive',
	    value: function isAlive() {
	      return this.sprite.visible;
	    }
	  }, {
	    key: 'getScore',
	    value: function getScore() {
	      return PLAYER_SCORE(0);
	    }
	  }, {
	    key: 'getBulletSprite',
	    value: function getBulletSprite() {
	      return this.projectile.getActiveSprite();
	    }
	  }]);

	  return Player;
	}();

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Level = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _enemyActiveBehaviour = __webpack_require__(8);
	
	var _enemyEmptyBehaviour = __webpack_require__(9);
	
	var _enemyIdleBehaviour = __webpack_require__(10);
	
	var _player = __webpack_require__(6);
	
	var _enemySpawn = __webpack_require__(11);
	
	var _levels = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Level = exports.Level = function () {
	  function Level(phaser, layoutID, filename) {
	    _classCallCheck(this, Level);
	
	    this.game = phaser;
	    this.platformGroup = null;
	    this.enemySpawns = [];
	    this.enemyBoss = null;
	    this.platforms = [];
	    this.totalEnemies = 0;
	    this.filename = filename;
	    this.sceneID = "Menu";
	
	    var onlineData = (0, _levels.getLayout)(layoutID);
	
	    if (onlineData != null) {
	      this.LevelData = JSON.parse(onlineData);
	    } else {
	      var request = new XMLHttpRequest();
	      request.open('GET', filename, false);
	      request.send(null);
	
	      if (request.status === 200) {
	        this.LevelData = JSON.parse(request.responseText);
	      }
	    }
	  }
	
	  _createClass(Level, [{
	    key: 'stopSpawningEnemies',
	    value: function stopSpawningEnemies() {
	      for (var i = 0; i < this.enemySpawns.length; i++) {
	        this.enemySpawns[i].stopSpawning();
	      }
	    }
	  }, {
	    key: 'createWorld',
	    value: function createWorld() {
	      this.background = this.game.add.sprite(0, 0, this.LevelData.Background);
	      this.background.height = 1080;
	      this.background.width = 1920;
	      this.sceneID = this.LevelData.Next;
	      this.next = this.game.add.sprite(1800, 900, "arrow");
	      this.next.visible = false;
	
	      for (var i = 0; i < this.LevelData.EnemySpawns.length; i++) {
	        var element = this.LevelData.EnemySpawns[i];
	
	        var spawnX = Number(element.SpawnPosition.x);
	        var spawnY = Number(element.SpawnPosition.y);
	
	        var gateX = Number(element.GatePosition.x);
	        var gateY = Number(element.GatePosition.y);
	
	        var enemySpawn = new _enemySpawn.EnemySpawn(this.game, element.ID);
	        enemySpawn.setSpawnPosition(gateX, gateY);
	        enemySpawn.setSpawnNumber(Number(element.Spawns), ["enemy1", "enemy2", "enemy3"], function (enemy, ID) {
	          var random = Math.random();
	          if (random > Number(element.Behaviour.Active)) {
	            enemy.behaviour = new _enemyActiveBehaviour.EnemyActiveBehaviour();
	          } else {
	            enemy.behaviour = new _enemyIdleBehaviour.EnemyIdleBehaviour();
	          }
	        });
	
	        enemySpawn.startSpawning(Number(element.Delay), spawnX, spawnY);
	
	        this.enemySpawns[i] = enemySpawn;
	        this.totalEnemies += Number(element.Spawns);
	      }
	
	      this.platformGroup = this.game.add.group();
	
	      for (var i = 0; i < this.LevelData.Platforms.length; i++) {
	        var element = this.LevelData.Platforms[i];
	
	        var x = element.x;
	        var y = element.y;
	        var w = element.w;
	        var h = element.h;
	
	        this.platforms[i] = this.game.add.tileSprite(Number(x), Number(y), Number(w), Number(h), element.ID);
	        this.game.physics.enable(this.platforms[i], Phaser.Physics.ARCADE);
	        this.platformGroup.add(this.platforms[i]);
	      }
	
	      this.platformGroup.setAll('body.immovable', true);
	
	      if (this.LevelData.Boss) {
	        var textureID = this.LevelData.Boss.ID;
	        var health = Number(this.LevelData.Boss.HitPoints);
	        var x = Number(this.LevelData.Boss.x);
	        var y = Number(this.LevelData.Boss.y);
	
	        this.enemyBoss = new EnemyBoss(this.game, health);
	        this.enemyBoss.setup(x, y, textureID);
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update(player) {
	      this.game.physics.arcade.collide(player.sprite, this.platformGroup);
	      this.game.physics.arcade.collide(player.getBulletSprite(), this.platformGroup);
	
	      this.dead = 0;
	
	      for (var i = 0; i < this.enemySpawns.length; i++) {
	        this.dead += this.enemySpawns[i].update(player, this.platformGroup, player.projectile);
	      }
	
	      if (this.enemyBoss != null) {
	        this.enemyBoss.update(player.sprite, this.platformGroup, player.projectile);
	      }
	
	      if (this.dead >= this.totalEnemies && (this.enemyBoss == null || this.enemyBoss.isDead())) {
	        this.next.visible = true;
	
	        if (player.sprite.x > 1850) {
	          player.exitScene();
	        }
	
	        if (player.sprite.x > 1850) {
	          (0, _player.PLAYER_SCORE)(100);
	          this.game.state.start(this.sceneID, true, false, player.getScore());
	        }
	      }
	    }
	  }]);

	  return Level;
	}();

/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var EnemyActiveBehaviour = exports.EnemyActiveBehaviour = function () {
	  function EnemyActiveBehaviour() {
	    _classCallCheck(this, EnemyActiveBehaviour);
	
	    this.onPlayerPlatform = false;
	    this.setSpeed = false;
	  }
	
	  _createClass(EnemyActiveBehaviour, [{
	    key: "moveTowards",
	    value: function moveTowards(dest_x, sprite) {
	      if (dest_x >= sprite.x) {
	        sprite.body.velocity.x = 50;
	      } else if (dest_x < sprite.x) {
	        sprite.body.velocity.x = -50;
	      }
	    }
	  }, {
	    key: "update",
	    value: function update(sprite, player) {
	      if (this.currentPlatform) {
	        if (player.visible) {
	          if (this.currentPlatform.y == player.y) {
	            this.moveTowards(player.x, sprite);
	          } else {
	            if (!this.setSpeed) {
	              this.setSpeed = true;
	              this.moveTowards(player.x, sprite);
	            }
	          }
	        } else {
	          sprite.body.velocity.x = 50;
	        }
	
	        if (sprite.x <= 0) {
	          sprite.body.velocity.x = 50;
	        } else if (sprite.x + sprite.width >= 1280) {
	          sprite.body.velocity.x = -50;
	        }
	      }
	    }
	  }, {
	    key: "platformCollision",
	    value: function platformCollision(sprite, platform) {
	      if (this.currentPlatform != platform) {
	        this.currentPlatform = platform;
	        this.setSpeed = false;
	      }
	    }
	  }, {
	    key: "playerCollision",
	    value: function playerCollision(sprite, player) {
	      player.body.velocity.x = 0;
	      player.body.gravity.y = 0;
	      player.visible = false;
	      player.y = -50;
	      player.x = -50;
	
	      setTimeout(function () {
	        player.body.gravity.y = 400;
	        player.visible = true;
	        player.y = 650;
	        player.x = 0;
	      }, 3000);
	    }
	  }]);

	  return EnemyActiveBehaviour;
	}();

/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var EnemyEmptyBehaviour = exports.EnemyEmptyBehaviour = function () {
	  function EnemyEmptyBehaviour() {
	    _classCallCheck(this, EnemyEmptyBehaviour);
	  }
	
	  _createClass(EnemyEmptyBehaviour, [{
	    key: "update",
	    value: function update(sprite, player) {
	      // No updates to do
	    }
	  }, {
	    key: "platformCollision",
	    value: function platformCollision(sprite, player) {
	      // No collions to handle
	    }
	  }, {
	    key: "playerCollision",
	    value: function playerCollision(sprite, player) {
	      // No collisions to handle
	    }
	  }]);

	  return EnemyEmptyBehaviour;
	}();

/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var EnemyIdleBehaviour = exports.EnemyIdleBehaviour = function () {
	  function EnemyIdleBehaviour() {
	    _classCallCheck(this, EnemyIdleBehaviour);
	
	    this.forward = false;
	  }
	
	  _createClass(EnemyIdleBehaviour, [{
	    key: "update",
	    value: function update(sprite, player) {
	      if (this.platform) {
	        if (player.visible) {
	          var vel = sprite.body.velocity.x;
	          if (this.forward && vel == -50 || vel == 0) {
	            sprite.body.velocity.x = 50;
	          }
	
	          if (!this.forward && vel == 50 || vel == 0) {
	            sprite.body.velocity.x = -50;
	          }
	
	          if (sprite.x <= this.platform.x) {
	            this.forward = true;
	          }
	
	          if (sprite.x + sprite.width >= this.platform.x + this.platform.width) {
	            this.forward = false;
	          }
	
	          if (sprite.x <= 0) {
	            sprite.body.velocity.x = 50;
	            this.forward = true;
	          } else if (sprite.x + sprite.width >= 1280) {
	            sprite.body.velocity.x = -50;
	            this.forward = false;
	          }
	        } else {
	          sprite.body.velocity.x = 50;
	        }
	      }
	    }
	  }, {
	    key: "platformCollision",
	    value: function platformCollision(sprite, platform) {
	      this.platform = platform;
	    }
	  }, {
	    key: "playerCollision",
	    value: function playerCollision(sprite, player) {
	      player.body.velocity.x = 0;
	      player.body.gravity.y = 0;
	      player.visible = false;
	      player.y = -50;
	      player.x = -50;
	
	      setTimeout(function () {
	        player.body.gravity.y = 400;
	        player.visible = true;
	        player.y = 650;
	        player.x = 0;
	      }, 3000);
	    }
	  }]);

	  return EnemyIdleBehaviour;
	}();

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EnemySpawn = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _enemy = __webpack_require__(12);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var EnemySpawn = exports.EnemySpawn = function () {
	  function EnemySpawn(game, textureID) {
	    _classCallCheck(this, EnemySpawn);
	
	    this.game = game;
	    this.spawnSprite = this.game.add.sprite(100, 100, textureID);
	    this.spawnNumber = 0;
	    this.enemies = [];
	    this.spawns = 0;
	  }
	
	  _createClass(EnemySpawn, [{
	    key: 'setSpawnNumber',
	    value: function setSpawnNumber(num, textureIDs, attachFunction) {
	      if (textureIDs.length == 3) {
	        this.spawnNumber = Number(num);
	
	        for (var i = 0; i < this.spawnNumber; i++) {
	          var type = parseInt(Math.abs(Math.random() * 3));
	
	          this.enemies.push(new _enemy.Enemy(this.game, textureIDs[type], type));
	          if (attachFunction) {
	            attachFunction(this.enemies[i], i);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'setSpawnPosition',
	    value: function setSpawnPosition(x, y) {
	      this.spawnSprite.x = x;
	      this.spawnSprite.y = y;
	    }
	  }, {
	    key: 'update',
	    value: function update(player, walls, bullet) {
	      var dead = 0;
	      var playerAlive = player.isAlive();
	
	      for (var b = 0; b < this.spawns; b++) {
	        this.enemies[b].update(player.sprite, walls, bullet, playerAlive);
	        if (this.enemies[b].isDead()) {
	          dead++;
	        }
	      }
	
	      return dead;
	    }
	  }, {
	    key: 'stopSpawning',
	    value: function stopSpawning() {
	      clearInterval(this.intervalID);
	    }
	  }, {
	    key: 'startSpawning',
	    value: function startSpawning(ms, x, y) {
	      var _this = this;
	
	      this.intervalID = setInterval(function () {
	        if (_this.spawns < _this.enemies.length) {
	          if (_this.spawns < _this.spawnNumber) {
	            _this.enemies[_this.spawns].spawn(x, y);
	            _this.spawns++;
	          } else {
	            clearInterval(_this.intervalID);
	          }
	        } else {
	          clearInterval(_this.intervalID);
	        }
	      }, ms);
	    }
	  }]);

	  return EnemySpawn;
	}();

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Enemy = exports.ENEMY_TYPES = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _enemyEmptyBehaviour = __webpack_require__(9);
	
	var _player = __webpack_require__(6);
	
	var _music = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ENEMY_TYPES = exports.ENEMY_TYPES = {
	  GREEN: 0,
	  RED: 1,
	  BLACK: 2
	};
	
	var Enemy = exports.Enemy = function () {
	  function Enemy(game, texture, type) {
	    _classCallCheck(this, Enemy);
	
	    this.behaviour = new _enemyEmptyBehaviour.EnemyEmptyBehaviour();
	    this.game = game;
	    this.type = type;
	    this.sprite = this.game.add.sprite(0, 0, texture);
	    this.sprite.visible = false;
	    this.alive = true;
	  }
	
	  _createClass(Enemy, [{
	    key: 'update',
	    value: function update(player, walls, bullet, alive) {
	      var instance = this;
	
	      if (this.sprite.visible) {
	        var playerHandler = function playerHandler(ob1, ob2) {
	          instance.behaviour.playerCollision(ob1, ob2);
	          (0, _player.PLAYER_SCORE)(-10);
	        };
	
	        var blockHandler = function blockHandler(ob1, ob2) {
	          instance.behaviour.platformCollision(ob1, ob2);
	        };
	
	        var bulletHandle = function bulletHandle(ob1, ob2) {
	          if (bullet.handleEnemyCollision(ob1, ob2, instance.type)) {
	            (0, _player.PLAYER_SCORE)(2);
	            instance.kill();
	          } else {
	            _music.Music.play("fail", false);
	            (0, _player.PLAYER_SCORE)(-1);
	          }
	        };
	
	        if (alive) {
	          this.game.physics.arcade.collide(this.sprite, bullet.getActiveSprite(), bulletHandle);
	          this.game.physics.arcade.collide(this.sprite, player, playerHandler);
	        }
	
	        this.game.physics.arcade.collide(this.sprite, walls, blockHandler);
	
	        instance.behaviour.update(instance.sprite, player);
	      }
	    }
	  }, {
	    key: 'isDead',
	    value: function isDead() {
	      return !this.alive;
	    }
	  }, {
	    key: 'kill',
	    value: function kill() {
	      this.sprite.visible = false;
	      this.alive = false;
	
	      _music.Music.play("taptap", false);
	    }
	  }, {
	    key: 'spawn',
	    value: function spawn(x, y) {
	      this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
	      this.alive = true;
	
	      this.sprite.body.collideWorldBounds = true;
	      this.sprite.body.gravity.y = 400;
	      this.sprite.visible = true;
	      this.sprite.x = x;
	      this.sprite.y = y;
	    }
	  }]);

	  return Enemy;
	}();

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Controls = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	var _music = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Controls.application = app;
	  return {
	    key: "Controls",
	    template: Controls
	  };
	};
	
	var Controls = exports.Controls = function () {
	  function Controls() {
	    _classCallCheck(this, Controls);
	  }
	
	  _createClass(Controls, [{
	    key: 'preload',
	    value: function preload() {
	      this.game = Controls.application.phaser;
	    }
	  }, {
	    key: 'backPress',
	    value: function backPress() {
	      this.game.state.start("Menu");
	    }
	  }, {
	    key: 'playPress',
	    value: function playPress() {
	      _music.Music.stop("menu");
	
	      this.game.state.start("LV1");
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      this.background = this.game.add.sprite(0, 0, 'city_background');
	      this.background.height = 1080;
	      this.background.width = 1920;
	
	      this.title = this.game.add.text(0, 50, "Controls", { font: "150px Comic Sans MS", fill: "#FDFDFD", align: "center" });
	
	      this.title.x = this.game.world.centerX - this.title.width / 2;
	
	      this.buttons = new _buttons.ButtonSet(this.game);
	      this.buttons.pushButton("START", this.game.world.centerX - 175, 800, 'button', this.playPress, this);
	      this.buttons.setButtonSetSize(350, 130);
	
	      this.buttons.attachText("START", "Start Game", "50px Comic Sans MS");
	
	      this.tutorialImages = [];
	
	      var x = 260;
	      for (var i = 0; i < 3; i++) {
	        this.tutorialImages[i] = this.game.add.sprite(x, 350, "controls" + (1 + i).toString());
	        this.tutorialImages[i].width = 400;
	        this.tutorialImages[i].height = 350;
	
	        x += 500;
	      }
	
	      this.buttons.pushButton("BACK", 30, 30, 'back', this.backPress, this);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Controls.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }]);

	  return Controls;
	}();

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Credits = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Credits.application = app;
	  return {
	    key: 'Credits',
	    template: Credits
	  };
	};
	
	var Credits = exports.Credits = function () {
	  function Credits() {
	    _classCallCheck(this, Credits);
	  }
	
	  _createClass(Credits, [{
	    key: 'preload',
	    value: function preload() {
	      this.game = Credits.application.phaser;
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      this.background = this.game.add.sprite(0, 0, 'city_background');
	      this.background.height = 1080;
	      this.background.width = 1920;
	
	      this.buttons = new _buttons.ButtonSet(this.game);
	      this.buttons.pushButton("BACK", 30, 30, 'back', this.goback, this);
	
	      this.title = this.game.add.text(0, 50, "Credits", { font: "150px Comic Sans MS", fill: "#FDFDFD", align: "center" });
	
	      this.title.x = this.game.world.centerX - this.title.width / 2;
	
	      this.footer = this.game.add.text(0, 900, '\"Made with JavaScript and Phaser 2.4.7 only\"', { font: "40px Comic Sans MS", fill: "#FDFDFD", align: "center" });
	
	      this.footer.x = this.game.world.centerX - this.footer.width / 2;
	
	      this.jonathon = this.game.add.button(500, 350, 'jonathan', this.jonathonPress, this);
	      this.jonathon.height = 300;
	      this.jonathon.width = 300;
	
	      this.jonathonText = this.game.add.text(450, 700, "B00236297\n  Did the physics, levels design, and input", { font: "20px Comic Sans MS", fill: "#FDFDFD", align: "center" });
	
	      this.william = this.game.add.button(1120, 350, 'william', this.williamPress, this);
	      this.william.height = 300;
	      this.william.width = 300;
	
	      this.williamText = this.game.add.text(1080, 700, "B00235610\n  Did the server, http code, and loading", { font: "20px Comic Sans MS", fill: "#FDFDFD", align: "center" });
	    }
	  }, {
	    key: 'williamPress',
	    value: function williamPress() {
	      window.open("https://uk.linkedin.com/pub/william-taylor/66/179/32b");
	    }
	  }, {
	    key: 'jonathonPress',
	    value: function jonathonPress() {
	      window.open("https://uk.linkedin.com/in/jlivingstone94");
	    }
	  }, {
	    key: 'goback',
	    value: function goback() {
	      this.game.state.start('Menu');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Credits.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#33cc33");
	      }
	    }
	  }]);

	  return Credits;
	}();

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Highscores = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _scores = __webpack_require__(16);
	
	var _buttons = __webpack_require__(3);
	
	var _http = __webpack_require__(19);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Highscores.application = app;
	  return {
	    key: 'Highscores',
	    template: Highscores
	  };
	};
	
	var Highscores = exports.Highscores = function () {
	  function Highscores() {
	    _classCallCheck(this, Highscores);
	
	    this.scoreBoardUrl = (0, _http.endpoint)('/score/GetScores/');
	    this.scoreBoard = null;
	  }
	
	  _createClass(Highscores, [{
	    key: 'preload',
	    value: function preload() {
	      this.game = Highscores.application.phaser;
	      this.scoreBoard = new _scores.ScoreBoard(this.game, this.scoreBoardUrl);
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      this.background = this.game.add.sprite(0, 0, 'city_background');
	      this.background.height = 1080;
	      this.background.width = 1920;
	
	      this.buttons = new _buttons.ButtonSet(Highscores.application.phaser);
	      this.buttons.pushButton("BACK", 30, 30, 'back', this.goback, this);
	
	      this.title = this.game.add.text(0, 50, "Highscores", { font: "100px Comic Sans MS", fill: "#FDFDFD", align: "center" });
	
	      this.title.x = this.game.world.centerX - this.title.width / 2;
	      this.scoreBoard.createNewsBoard("news");
	      this.scoreBoard.populateNewsBoard(5);
	
	      this.sprite_right = this.game.add.sprite(550, 160, 'character');
	      this.sprite_right.animations.add('walk', [0, 1, 2, 3, 4, 5]);
	      this.sprite_right.animations.play('walk', 10, true);
	
	      this.sprite_left = this.game.add.sprite(1350, 160, 'character');
	      this.sprite_left.animations.add('walk', [0, 1, 2, 3, 4, 5]);
	      this.sprite_left.animations.play('walk', 10, true);
	      this.sprite_left.scale.x = -1;
	    }
	  }, {
	    key: 'goback',
	    value: function goback() {
	      this.game.state.start('Menu');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Highscores.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }]);

	  return Highscores;
	}();

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ScoreBoard = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _httpGetRequest = __webpack_require__(17);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ScoreBoard = exports.ScoreBoard = function () {
	  function ScoreBoard(phaser, httpLink) {
	    _classCallCheck(this, ScoreBoard);
	
	    this.newsRequest = new _httpGetRequest.HttpGetRequest(httpLink);
	    this.newsStories = [];
	    this.newsLabels = [];
	    this.phaser = phaser;
	  }
	
	  _createClass(ScoreBoard, [{
	    key: "createNewsBoard",
	    value: function createNewsBoard(backPlateID) {
	      this.newsBackPlate = this.phaser.add.sprite(900, 200, backPlateID);
	      this.newsBackPlate.height = 850;
	      this.newsBackPlate.width = 800;
	      this.newsBackPlate.x = this.phaser.world.centerX - 800 / 2;
	
	      this.newsHeader = this.phaser.add.text(1050, 220, "Top 10 Highscores", { font: "60px Comic Sans MS", fill: "#FFFFFF", align: "center" });
	
	      this.newsHeader.height = 100;
	      this.newsHeader.width = 500;
	      this.newsHeader.x = this.phaser.world.centerX - 500 / 2;
	
	      var _this = this;
	
	      this.newsRequest.onReceived(function (d) {
	        if (_this.newsStories.length == 0) {
	          _this.newsStories = d;
	          _this.populateNewsBoard(10);
	        }
	      });
	
	      this.newsRequest.send();
	    }
	  }, {
	    key: "populateNewsBoard",
	    value: function populateNewsBoard(maxStories) {
	      for (var i = 0; i < this.newsStories.length && i < maxStories; i++) {
	        this.newsLabels[i * 2] = this.phaser.add.text(700, 350 + i * 60, this.newsStories[i].Name.S, { font: "50px Comic Sans MS", fill: "#FDFDFD", align: "left" });
	
	        this.newsLabels[i * 2 + 1] = this.phaser.add.text(1100, 350 + i * 60, this.newsStories[i].Highscore.N, { font: "50px Comic Sans MS", fill: "#FDFDFD", align: "left" });
	      }
	    }
	  }]);

	  return ScoreBoard;
	}();

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HttpGetRequest = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _exception = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var HttpGetRequest = exports.HttpGetRequest = function () {
	  function HttpGetRequest(url) {
	    _classCallCheck(this, HttpGetRequest);
	
	    this.xmlHttpRequest = new XMLHttpRequest();
	    this.requestURL = url;
	    this.callback = null;
	  }
	
	  _createClass(HttpGetRequest, [{
	    key: "onReceived",
	    value: function onReceived(func) {
	      this.callback = func;
	    }
	  }, {
	    key: "send",
	    value: function send() {
	      var _this = this;
	
	      try {
	        (function () {
	          var instance = _this;
	          _this.xmlHttpRequest.onload = function () {
	            if (instance.callback) {
	              instance.callback(JSON.parse(this.responseText));
	            }
	          };
	
	          _this.xmlHttpRequest.open("GET", _this.requestURL, true);
	          _this.xmlHttpRequest.send(null);
	        })();
	      } catch (err) {
	        var exception = new _exception.GameException();
	        exception.set("Couldnt execute get request", this.requestURL, _exception.ErrorSeverity.HIGH);
	        exception.throw();
	      }
	    }
	  }]);

	  return HttpGetRequest;
	}();

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ErrorSeverity = exports.ErrorSeverity = {
	  OkayToIgnore: "Ignore",
	  High: "High",
	  Low: "Low"
	};
	
	var GameException = exports.GameException = function () {
	  function GameException() {
	    _classCallCheck(this, GameException);
	
	    this.severity = ErrorSeverity.OkayToIgnore;
	    this.message = "";
	    this.title = "";
	  }
	
	  _createClass(GameException, [{
	    key: "throw",
	    value: function _throw() {
	      if (this.severity === ErrorSeverity.OkayToIgnore) {
	        console.log(this.severity);
	        console.log(this.title);
	        console.log(this.message);
	      } else {
	        window.alert("Throwing " + this.severity + " problem error");
	        window.alert(this.title + "\n" + this.message);
	      }
	    }
	  }, {
	    key: "set",
	    value: function set(title, message, severity) {
	      this.setSeverity(severity);
	      this.setMessage(message);
	      this.setTitle(title);
	    }
	  }, {
	    key: "setMessage",
	    value: function setMessage(msg) {
	      if (msg) {
	        this.message = msg;
	      }
	    }
	  }, {
	    key: "setSeverity",
	    value: function setSeverity(severity) {
	      if (severity) {
	        this.severity = severity;
	      }
	    }
	  }, {
	    key: "setTitle",
	    value: function setTitle(title) {
	      if (title) {
	        this.title = title;
	      }
	    }
	  }]);

	  return GameException;
	}();

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HttpGetRequest = exports.HttpPostRequest = exports.HttpLocalRequest = exports.endpoint = undefined;
	
	var _httpLocalRequest = __webpack_require__(20);
	
	var httpLocal = _interopRequireWildcard(_httpLocalRequest);
	
	var _httpPostRequest = __webpack_require__(21);
	
	var httpPost = _interopRequireWildcard(_httpPostRequest);
	
	var _httpGetRequest = __webpack_require__(17);
	
	var httpGet = _interopRequireWildcard(_httpGetRequest);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	//const serverAddress = 'http://52.30.3.233:3002';
	var serverAddress = 'http://localhost:3002';
	
	var endpoint = exports.endpoint = function endpoint(src) {
	  return '' + (serverAddress + src);
	};
	
	var HttpLocalRequest = exports.HttpLocalRequest = httpLocal.HttpLocalRequest;
	var HttpPostRequest = exports.HttpPostRequest = httpPost.HttpPostRequest;
	var HttpGetRequest = exports.HttpGetRequest = httpGet.HttpGetRequest;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HttpLocalRequest = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _exception = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var HttpLocalRequest = exports.HttpLocalRequest = function () {
	  function HttpLocalRequest(filename) {
	    _classCallCheck(this, HttpLocalRequest);
	
	    this.filename = filename;
	  }
	
	  _createClass(HttpLocalRequest, [{
	    key: 'grab',
	    value: function grab(parse) {
	      var request = new XMLHttpRequest();
	      request.open('GET', this.filename, false);
	      request.send(null);
	
	      if (request.status == 200) {
	        if (parse) {
	          return JSON.parse(request.responseText);
	        } else {
	          return request.responseText;
	        }
	      } else {
	        var exception = new _exception.GameException();
	        exception.set("Couldnt get local asset", this.filename, _exception.ErrorSeverity.HIGH);
	        exception.throw();
	      }
	    }
	  }]);

	  return HttpLocalRequest;
	}();

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.HttpPostRequest = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _exception = __webpack_require__(18);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var HttpPostRequest = exports.HttpPostRequest = function () {
	  function HttpPostRequest(url) {
	    _classCallCheck(this, HttpPostRequest);
	
	    this.xmlHttpRequest = null;
	    this.requestURL = url;
	    this.callback = function () {};
	  }
	
	  _createClass(HttpPostRequest, [{
	    key: "send",
	    value: function send(body) {
	      var instance = this;
	
	      try {
	        this.xmlHttpRequest = new XMLHttpRequest();
	        this.xmlHttpRequest.onload = function () {
	          instance.callback(this.responseText);
	        };
	
	        this.xmlHttpRequest.open("POST", this.requestURL, false);
	        this.xmlHttpRequest.setRequestHeader("Content-type", "application/json");
	        this.xmlHttpRequest.send(JSON.stringify(body));
	
	        var status = this.xmlHttpRequest.status;
	
	        if (status >= 200 && status < 304) {
	          return true;
	        } else {
	          return false;
	        }
	      } catch (err) {
	        var gameException = new _exception.GameException();
	        gameException.set("HTTP_PostRequest", err.message, _exception.ErrorSeverity.OK_TO_IGNORE);
	        gameException.throw();
	
	        return false;
	      }
	    }
	  }, {
	    key: "setCallback",
	    value: function setCallback(callback) {
	      this.callback = callback;
	    }
	  }, {
	    key: "setUrl",
	    value: function setUrl(url) {
	      this.url = url;
	    }
	  }]);

	  return HttpPostRequest;
	}();

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MainMenu = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	var _news = __webpack_require__(23);
	
	var _music = __webpack_require__(4);
	
	var _http = __webpack_require__(19);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  MainMenu.application = app;
	  return {
	    key: 'Menu',
	    template: MainMenu
	  };
	};
	
	var MainMenu = exports.MainMenu = function () {
	  function MainMenu() {
	    _classCallCheck(this, MainMenu);
	  }
	
	  _createClass(MainMenu, [{
	    key: 'preload',
	    value: function preload() {
	      this.game = MainMenu.application.phaser;
	
	      if (!this.newsBoard) {
	        this.newsBoard = new _news.NewsBoard((0, _http.endpoint)("/news/GetNews/"), this.game);
	      }
	    }
	  }, {
	    key: 'handlePlayPress',
	    value: function handlePlayPress(s, s1, s2) {
	      var _this = this;
	
	      setTimeout(function () {
	        return _this.game.state.start("Controls");
	      }, 500);
	    }
	  }, {
	    key: 'handleHighscorePress',
	    value: function handleHighscorePress(s, s1, s2) {
	      var _this2 = this;
	
	      setTimeout(function () {
	        return _this2.game.state.start("Highscores");
	      }, 500);
	    }
	  }, {
	    key: 'handleCreditsPress',
	    value: function handleCreditsPress(s, s1, s2) {
	      var _this3 = this;
	
	      setTimeout(function () {
	        return _this3.game.state.start("Credits");
	      }, 500);
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      var game = MainMenu.application.phaser;
	      var background = game.add.sprite(0, 0, 'city_background');
	      var title = game.add.text(0, 50, "An Edge of 5 Kingdoms", { font: "100px Comic Sans MS", fill: "#FDFDFD", align: "center" });
	
	      title.x = game.world.centerX - title.width / 2;
	
	      background.height = 1080;
	      background.width = 1920;
	
	      this.buttons = new _buttons.ButtonSet(this.game);
	      this.buttons.pushButton("PLAY", 200, 300, 'button', this.handlePlayPress, this);
	      this.buttons.pushButton("SCORES", 200, 500, 'button', this.handleHighscorePress, this);
	      this.buttons.pushButton("CREDITS", 200, 700, 'button', this.handleCreditsPress, this);
	      this.buttons.setButtonSetSize(350, 130);
	
	      this.buttons.attachText("PLAY", "Play", "60px Comic Sans MS");
	      this.buttons.attachText("SCORES", "Scores", "60px Comic Sans MS");
	      this.buttons.attachText("CREDITS", "Credits", "60px Comic Sans MS");
	
	      this.newsBoard.createNewsBoard("news");
	      this.newsBoard.populateNewsBoard(8);
	
	      this.optionButtons = new _buttons.ButtonSet(this.game);
	      this.optionButtons.pushButton("FULLSCREEN", 1920 - 120, 950, 'fullscreen', this.fullscreen, this);
	      this.optionButtons.pushButton("AUDIO", 1920 - 120, 825, 'audio', this.mute, this);
	      this.optionButtons.setButtonSetSize(100, 100);
	
	      _music.Music.stop("level");
	    }
	  }, {
	    key: 'fullscreen',
	    value: function fullscreen() {
	      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
	      this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
	      this.game.scale.refresh();
	
	      if (this.game.scale.isFullScreen) {
	        this.game.scale.stopFullScreen();
	      } else {
	        this.game.scale.startFullScreen();
	      }
	    }
	  }, {
	    key: 'mute',
	    value: function mute() {
	      _music.Music.mute();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (MainMenu.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }]);

	  return MainMenu;
	}();

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.NewsBoard = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _httpGetRequest = __webpack_require__(17);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NewsBoard = exports.NewsBoard = function () {
	  function NewsBoard(httpLink, phaser) {
	    _classCallCheck(this, NewsBoard);
	
	    this.newsRequest = new _httpGetRequest.HttpGetRequest(httpLink);
	    this.newsStories = [];
	    this.newsLabels = [];
	    this.phaser = phaser;
	  }
	
	  _createClass(NewsBoard, [{
	    key: "createNewsBoard",
	    value: function createNewsBoard(backPlateID) {
	      var _this = this;
	
	      this.newsBackPlate = this.phaser.add.sprite(650, 300, backPlateID);
	      this.newsBackPlate.height = 550;
	      this.newsBackPlate.width = 1050;
	
	      this.newsHeader = this.phaser.add.text(750, 350, "News Board", { font: "80px Comic Sans MS", fill: "#FFFFFF", align: "center" });
	
	      this.newsHeader.height = 50;
	      this.newsHeader.width = 200;
	      this.newsRequest.onReceived(function (stories) {
	        if (_this.newsStories.length == 0) {
	          _this.newsStories = stories;
	          _this.populateNewsBoard(8);
	        }
	      });
	
	      this.newsRequest.send();
	    }
	  }, {
	    key: "populateNewsBoard",
	    value: function populateNewsBoard(maxStories) {
	      for (var i = 0; i < this.newsStories.length && i < maxStories; i++) {
	        var header = "New Version";
	        var text = "herewearetestingthelimitofthenewsfeedas";
	
	        this.newsLabels[i * 2] = this.phaser.add.text(750, 425 + i * 35, this.newsStories[i].Heading.S, { font: "30px Comic Sans MS", fill: "#FDFDFD", align: "left" });
	
	        this.newsLabels[i * 2 + 1] = this.phaser.add.text(930, 425 + i * 35, this.newsStories[i].Text.S, { font: "30px Comic Sans MS", fill: "#FDFDFD", align: "left" });
	      }
	    }
	  }]);

	  return NewsBoard;
	}();

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Preload = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _levels = __webpack_require__(1);
	
	var _httpLocalRequest = __webpack_require__(20);
	
	var _httpPostRequest = __webpack_require__(21);
	
	var _http = __webpack_require__(19);
	
	var _music = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Preload.application = app;
	  return { key: "Preload", template: Preload };
	};
	
	var Preload = exports.Preload = function () {
	  function Preload() {
	    _classCallCheck(this, Preload);
	
	    this.startingState = 'Menu';
	  }
	
	  _createClass(Preload, [{
	    key: 'create',
	    value: function create() {
	      this.game.input.addPointer();
	      this.game.input.addPointer();
	
	      if (!this.skip || this.continue && _music.Music.hasDecodedTracks()) {
	        _music.Music.play(this.game, "menu", true);
	
	        this.game.state.start(this.startingState);
	      }
	    }
	  }, {
	    key: 'preload',
	    value: function preload() {
	      this.game = Preload.application.phaser;
	      this.game.input.MAX_POINTERS = 1;
	
	      this.background = this.game.add.sprite(0, 0, "splash");
	      this.preloadBar = this.game.add.sprite(998, 900, "loader");
	      this.preloadBar.anchor.setTo(0.5);
	
	      this.game.load.setPreloadSprite(this.preloadBar);
	      this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
	      this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
	      this.game.scale.refresh();
	
	      var assetFile = new _httpLocalRequest.HttpLocalRequest("data/load.json");
	      var jsonText = assetFile.grab(true);
	      var instance = this;
	
	      this.continue = false;
	
	      for (var i = 0; i < jsonText.assets.length; i++) {
	        var type = jsonText.assets[i].type;
	
	        switch (type) {
	          case "spritesheet":
	            this.game.load.spritesheet(jsonText.assets[i].ID, jsonText.assets[i].filename, 81, 110, 11);break;
	          case "image":
	            this.game.load.image(jsonText.assets[i].ID, jsonText.assets[i].filename);break;
	          case "audio":
	            this.game.load.audio(jsonText.assets[i].ID, jsonText.assets[i].filename);break;
	
	          default:
	            console.log("Unsupported file type");break;
	        }
	      }
	
	      var requests = new _httpPostRequest.HttpPostRequest((0, _http.endpoint)("/level/getLevel"));
	      var instance = this;
	
	      requests.setCallback(function (data) {
	        (0, _levels.storeLevel)(data);
	
	        var count = (0, _levels.levelsStored)();
	
	        if (count < 5) {
	          requests.send({ "level": 'level' + (count + 1) + '.json' });
	        } else {
	          instance.continue = true;
	        }
	      });
	
	      this.skip = requests.send({ "level": "level1.json" });
	    }
	  }]);

	  return Preload;
	}();

/***/ },
/* 25 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Boot = function () {
	  function Boot() {
	    _classCallCheck(this, Boot);
	  }
	
	  _createClass(Boot, [{
	    key: "preload",
	    value: function preload() {
	      var game = Boot.application.phaser;
	      game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
	      game.stage.backgroundColor = '#FFFFFF';
	      game.load.image("loader", "data/img/loader.png");
	      game.load.image("splash", "data/img/splash.jpg");
	    }
	  }, {
	    key: "create",
	    value: function create() {
	      Boot.application.phaser.state.start("Preload");
	    }
	  }]);
	
	  return Boot;
	}();
	
	exports.default = function (app) {
	  Boot.application = app;
	  return {
	    key: "Boot",
	    template: Boot
	  };
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Level5 = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	var _bullet = __webpack_require__(5);
	
	var _player = __webpack_require__(6);
	
	var _level = __webpack_require__(7);
	
	var _music = __webpack_require__(4);
	
	var _levels = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Level5.application = app;
	  return {
	    key: 'LV5',
	    template: Level5
	  };
	};
	
	var Level5 = exports.Level5 = function () {
	  function Level5() {
	    _classCallCheck(this, Level5);
	  }
	
	  _createClass(Level5, [{
	    key: 'preload',
	    value: function preload() {
	      this.pointer = Level5.application.phaser.input.activePointer;
	      this.pointer.y = 650;
	      this.pointer.x = 640;
	
	      this.game = Level5.application.phaser;
	
	      this.levelLayout = new _level.Level(this.game, _levels.LevelLayout.LV5, "data/lvl/level5.json");
	      this.uiButtons = new _buttons.ButtonSet(Level5.application.phaser);
	      this.player = new _player.Player(this.game);
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      this.levelLayout.createWorld();
	      var instance = this;
	
	      this.player.setup();
	      this.player.setPosition(640, 650);
	
	      this.uiButtons.pushButton("MENU", 30, 30, 'button', this.handleBackButtonPress, this);
	      this.uiButtons.pushButton("SWITCH", 1250 - 200, 30, 'button', this.handleToggleButtonPress, this, "0x00FF00");
	      this.uiButtons.setButtonSetSize(200, 75);
	
	      this.uiButtons.attachText("MENU", "Menu", "30px Comic Sans MS");
	      this.uiButtons.attachText("SWITCH", "Change Bullet", "23px Comic Sans MS");
	      this.uiButtons.onUp = function (buttons) {
	        buttons[1].button.tint = instance.player.getBulletColour();
	      };
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      this.levelLayout.update(this.player, this.blockGroup);
	      this.player.update(Level5.application.phaser.input.activePointer, this.levelLayout, this.uiButtons.isOver);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Level5.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }, {
	    key: 'handleToggleButtonPress',
	    value: function handleToggleButtonPress() {
	      this.player.switchProjectile();
	    }
	  }, {
	    key: 'handleBackButtonPress',
	    value: function handleBackButtonPress() {
	      _music.Music.play("menu", true);
	
	      this.levelLayout.stopSpawningEnemies();
	      this.game.state.start("Menu");
	    }
	  }]);

	  return Level5;
	}();

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Level4 = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	var _bullet = __webpack_require__(5);
	
	var _player = __webpack_require__(6);
	
	var _level = __webpack_require__(7);
	
	var _music = __webpack_require__(4);
	
	var _levels = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Level4.application = app;
	  return {
	    key: 'LV4',
	    template: Level4
	  };
	};
	
	var Level4 = exports.Level4 = function () {
	  function Level4() {
	    _classCallCheck(this, Level4);
	  }
	
	  _createClass(Level4, [{
	    key: 'preload',
	    value: function preload() {
	      this.pointer = Level4.application.phaser.input.activePointer;
	      this.pointer.y = 650;
	      this.pointer.x = 0;
	
	      this.game = Level4.application.phaser;
	
	      this.levelLayout = new _level.Level(this.game, _levels.LevelLayout.LV4, "data/lvl/level4.json");
	      this.uiButtons = new _buttons.ButtonSet(this.game);
	      this.player = new _player.Player(this.game);
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      var instance = this;
	
	      this.levelLayout.createWorld();
	      this.player.setup();
	
	      this.uiButtons.pushButton("MENU", 30, 30, 'button', this.handleBackButtonPress, this);
	      this.uiButtons.pushButton("SWITCH", 1250 - 200, 30, 'button', this.handleToggleButtonPress, this, "0x00FF00");
	      this.uiButtons.setButtonSetSize(200, 75);
	
	      this.uiButtons.attachText("MENU", "Menu", "30px Comic Sans MS");
	      this.uiButtons.attachText("SWITCH", "Change Bullet", "23px Comic Sans MS");
	      this.uiButtons.onUp = function (buttons) {
	        buttons[1].button.tint = instance.player.getBulletColour();
	      };
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      this.levelLayout.update(this.player, this.blockGroup);
	      this.player.update(Level4.application.phaser.input.activePointer, this.levelLayout, this.uiButtons.isOver);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Level4.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }, {
	    key: 'handleToggleButtonPress',
	    value: function handleToggleButtonPress() {
	      this.player.switchProjectile();
	    }
	  }, {
	    key: 'handleBackButtonPress',
	    value: function handleBackButtonPress() {
	      _music.Music.play("menu", true);
	
	      this.levelLayout.stopSpawningEnemies();
	      this.game.state.start("Menu");
	    }
	  }]);

	  return Level4;
	}();

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Level3 = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	var _bullet = __webpack_require__(5);
	
	var _player = __webpack_require__(6);
	
	var _level = __webpack_require__(7);
	
	var _music = __webpack_require__(4);
	
	var _levels = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Level3.application = app;
	  return {
	    key: 'LV3',
	    template: Level3
	  };
	};
	
	var Level3 = exports.Level3 = function () {
	  function Level3() {
	    _classCallCheck(this, Level3);
	  }
	
	  _createClass(Level3, [{
	    key: 'preload',
	    value: function preload() {
	      this.pointer = Level3.application.phaser.input.activePointer;
	      this.pointer.y = 650;
	      this.pointer.x = 0;
	
	      this.game = Level3.application.phaser;
	
	      this.levelLayout = new _level.Level(this.game, _levels.LevelLayout.LV3, "data/lvl/level3.json");
	      this.uiButtons = new _buttons.ButtonSet(this.game);
	      this.player = new _player.Player(this.game);
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      var instance = this;
	
	      this.levelLayout.createWorld();
	      this.player.setup();
	
	      this.uiButtons.pushButton("MENU", 30, 30, 'button', this.handleBackButtonPress, this);
	      this.uiButtons.pushButton("SWITCH", 1250 - 200, 30, 'button', this.handleToggleButtonPress, this, "0x00FF00");
	      this.uiButtons.setButtonSetSize(200, 75);
	
	      this.uiButtons.attachText("MENU", "Menu", "30px Comic Sans MS");
	      this.uiButtons.attachText("SWITCH", "Change Bullet", "23px Comic Sans MS");
	      this.uiButtons.onUp = function (buttons) {
	        buttons[1].button.tint = instance.player.getBulletColour();
	      };
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      this.levelLayout.update(this.player, this.blockGroup);
	      this.player.update(Level3.application.phaser.input.activePointer, this.levelLayout, this.uiButtons.isOver);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Level3.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }, {
	    key: 'handleToggleButtonPress',
	    value: function handleToggleButtonPress() {
	      this.player.switchProjectile();
	    }
	  }, {
	    key: 'handleBackButtonPress',
	    value: function handleBackButtonPress() {
	      _music.Music.play("menu", true);
	
	      this.levelLayout.stopSpawningEnemies();
	      this.game.state.start("Menu");
	    }
	  }]);

	  return Level3;
	}();

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Level2 = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _buttons = __webpack_require__(3);
	
	var _bullet = __webpack_require__(5);
	
	var _player = __webpack_require__(6);
	
	var _level = __webpack_require__(7);
	
	var _music = __webpack_require__(4);
	
	var _levels = __webpack_require__(1);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	exports.default = function (app) {
	  Level2.application = app;
	  return {
	    key: 'LV2',
	    template: Level2
	  };
	};
	
	var Level2 = exports.Level2 = function () {
	  function Level2() {
	    _classCallCheck(this, Level2);
	  }
	
	  _createClass(Level2, [{
	    key: 'preload',
	    value: function preload() {
	      this.pointer = Level2.application.phaser.input.activePointer;
	      this.pointer.y = 650;
	      this.pointer.x = 0;
	
	      this.game = Level2.application.phaser;
	
	      this.levelLayout = new _level.Level(this.game, _levels.LevelLayout.LV2, "data/lvl/level2.json");
	      this.uiButtons = new _buttons.ButtonSet(this.game);
	      this.player = new _player.Player(this.game);
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      var _this = this;
	
	      this.levelLayout.createWorld();
	      this.player.setup();
	
	      this.uiButtons.pushButton("MENU", 30, 30, 'button', this.handleBackButtonPress, this);
	      this.uiButtons.pushButton("SWITCH", 1880 - 200, 30, 'button', this.handleToggleButtonPress, this, "0x00FF00");
	      this.uiButtons.setButtonSetSize(200, 75);
	
	      this.uiButtons.attachText("MENU", "Menu", "30px Comic Sans MS");
	      this.uiButtons.attachText("SWITCH", "Change Bullet", "23px Comic Sans MS");
	      this.uiButtons.onUp = function (buttons) {
	        buttons[1].button.tint = _this.player.getBulletColour();
	      };
	
	      _music.Music.play(Level2.application.phaser, "level", true);
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      this.levelLayout.update(this.player, this.blockGroup);
	      this.player.update(Level2.application.phaser.input.activePointer, this.levelLayout, this.uiButtons.isOver);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (Level2.application.debug) {
	        this.game.time.advancedTiming = true;
	        this.game.debug.text(this.game.time.fps || '--', 2, 14, "#000000");
	      }
	    }
	  }, {
	    key: 'handleToggleButtonPress',
	    value: function handleToggleButtonPress() {
	      this.player.switchProjectile();
	    }
	  }, {
	    key: 'handleBackButtonPress',
	    value: function handleBackButtonPress() {
	      _music.Music.play("menu", true);
	
	      this.levelLayout.stopSpawningEnemies();
	      this.game.state.start("Menu");
	    }
	  }]);

	  return Level2;
	}();

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,